// ----------------------------------------------------------------------------
// Copyright (C) 2015 Louise A. Dennis, Michael Fisher, Maryam Kamali, Owen McAree 
// and Sandor Veres
// 
// This file is part of the Engineering Autonomous Space Software (EASS) Library.
// 
// The EASS Library is free software; you can redistribute it and/or
// modify it under the terms of the GNU Lesser General Public
// License as published by the Free Software Foundation; either
// version 3 of the License, or (at your option) any later version.
// 
// The EASS Library is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
// Lesser General Public License for more details.
// 
// You should have received a copy of the GNU Lesser General Public
// License along with the EASS Library; if not, write to the Free Software
// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
// 
// To contact the authors:
// http://www.csc.liv.ac.uk/~lad
//
//----------------------------------------------------------------------------

small_model_generation: G(follower3, platoon_m(follower3, follower1)) &
				ItD(follower3, send(leader, 1, message(follower3, 1, follower1)))  &
				B(follower3, join_agreement(follower3, follower1)) &
				D(follower3, perf(join_ok(1))) & 
				B(follower3, changed_lane) &
				D(follower3, perf(speed_controller(1))) &
				B(follower3, initial_distance) &
				D(follower3, perf(steering_controller(1))) &
				ItD(follower3, send(leader, 1, message(follower3, 2)))  &
				B(follower3, platoon_m) &
				B(follower3, platoon_ok) &
				G(follower1, set_spacing(17)) &
				ItD(follower3, send(leader, 1, set_spacing_from(follower3)))  &
				B(follower3, ack_spacing(17)) &
				B(follower3, spacing) &
				D(follower3, perf(speed_controller(0))) &
				D(follower3, perf(steering_controller(0))) &
				D(follower3, perf(join_ok(0)))  



model_generation: G(follower3, platoon_m(follower3, follower1)) &
				B(follower3, ready_to_join) &
				ItD(follower3, send(leader, 1, message(follower3, 1, follower1)))  &
				B(follower3, join_agreement(follower3, follower1)) &
				D(follower3, perf(join_ok(1))) & 
				ItD(vehicle3, send(follower3, 1, vehicle_failed)) &
				B(follower3, vehicle_failed) &
				B(follower3, changed_lane) &
				D(follower3, perf(speed_controller(1))) &
				B(follower3, initial_distance) &
				D(follower3, perf(steering_controller(1))) &
				ItD(follower3, send(leader, 1, message(follower3, 2)))  &
				B(follower3, platoon_m) &
				B(follower3, platoon_ok) &
				B(follower3, ready_to_leave) &
				G(follower3, set_spacing(17)) &
				ItD(follower3, send(leader, 1, set_spacing_from(follower3)))  &
				B(follower3, ack_spacing(17)) &
				B(follower3, spacing) &
				G(follower3, leave_platoon) & 
				ItD(follower3, send(leader, 1, message(follower3, 0)))  &
				B(follower3, leave_agreement(follower3)) &
				D(follower3, perf(speed_controller(0))) &
				D(follower3, perf(steering_controller(0))) &
				D(follower3, perf(join_ok(0))) & 
				B(follower3, no_platoon_m) &
				B(follower3, leave_ok) 

full_model: [] ~B(follower3, bad)

test: <> B (follower3, join_agreement(follower3, follower1)) || [] ~B(follower3, join_agreement(follower3, follower1))

req1_1_verified_prop3_in_paper: [](  
		(
			G(follower3, platoon_m(follower3, follower1))
			&
			[] (ItD(follower3, send(leader, 1, message(follower3, 1, follower1))) -> <>B(follower3, join_agreement(follower3, follower1)))
			&
			~B(follower3, changed_lane)
		)
		->
		<>D(follower3, perf(join_ok(1)))  
		)
		
req1_2_verified_prop1and2_in_paper: [](
		(
			G(follower3, platoon_m(follower3, follower1))
			&
			[]~B (follower3, join_agreement(follower3, follower1))
		)
		-> 
		[](~D(follower3, perf(join_ok(1))))
		)

req1_1: [](
		(
			G(follower3, platoon_m(follower3, follower1))
			&
	 		[]~B(follower3, changed_lane)
	 	)
		->
	  	[]~D(follower3, speed_controller(1))
		)
		
